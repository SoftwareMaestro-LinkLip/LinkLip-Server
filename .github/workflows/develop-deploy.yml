# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Development Server Deploy

on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## create application-dev.yml
      - name: Make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.APPLICATION_DEV }}" > ./application-dev.yml
        shell: bash

      ## create application-local.yml
      - name: Make application-local.yml
        if: contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources
          touch ./application-local.yml
          echo "${{ secrets.APPLICATION_LOCAL }}" > ./application-local.yml
        shell: bash

      ## create application-oauth.yml
      - name: Make application-oauth.yml
        if: contains(github.ref, 'oauth')
        run: |
          cd ./src/main/resources
          touch ./application-oauth.yml
          echo "${{ secrets.APPLICATION_OAUTH }}" > ./application-oauth.yml
        shell: bash

      - name: MariaDB Connection
        uses: getong/mariadb-action@v1.1
        with:
          host port: 3306
          character set server: 'utf8'
          collation server: 'utf8_general_ci'
          mysql database: 'linklip_db'
          mysql root password: 1234
          mysql user: 'root'
          mysql password: 1234

      ## gradle build with checking code style
      - name: Gradle Build with Checking Code Style
        run: ./gradlew clean build

      - name: Make Directory for deliver
        run: mkdir deploy

      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      - name: Copy appsepc.yml
        run: cp ./appspec.yml ./deploy/

      - name: Copy deploy.sh
        run: cp ./scripts/deploy.sh ./deploy/

      - name: Make zip file
        run: zip -r -qq -j ./linklip-dev-server.zip ./deploy

      - name: aws credential
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to AWS S3
        run: aws s3 cp --region ap-northeast-2 --acl private ./linklip-dev-server.zip s3://${{ secrets.AWS_S3_BUCKET }}/

      - name: Code Deploy
        run: aws deploy create-deployment --application-name ${{ secrets.AWS_CODEDEPLOY_NAME }} --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP }} --s3-location bucket=${{ secrets.AWS_S3_BUCKET }},key=linklip-dev-server.zip,bundleType=zip